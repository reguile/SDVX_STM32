
SDVX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000124  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000634  08000124  08000124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000758  08000758  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000758  08000758  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000758  08000758  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000758  08000758  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800075c  0800075c  0001075c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000001c  0800077c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800077c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b05  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002a3  00000000  00000000  00020b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000088  00000000  00000000  00020df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  00020e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d5e1  00000000  00000000  00020ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005ba  00000000  00000000  0002e4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004ac2c  00000000  00000000  0002ea83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000796af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000184  00000000  00000000  0007972c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000124 <__do_global_dtors_aux>:
 8000124:	b510      	push	{r4, lr}
 8000126:	4c05      	ldr	r4, [pc, #20]	; (800013c <__do_global_dtors_aux+0x18>)
 8000128:	7823      	ldrb	r3, [r4, #0]
 800012a:	b933      	cbnz	r3, 800013a <__do_global_dtors_aux+0x16>
 800012c:	4b04      	ldr	r3, [pc, #16]	; (8000140 <__do_global_dtors_aux+0x1c>)
 800012e:	b113      	cbz	r3, 8000136 <__do_global_dtors_aux+0x12>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x20>)
 8000132:	f3af 8000 	nop.w
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	2000001c 	.word	0x2000001c
 8000140:	00000000 	.word	0x00000000
 8000144:	08000740 	.word	0x08000740

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b03      	ldr	r3, [pc, #12]	; (8000158 <frame_dummy+0x10>)
 800014c:	b11b      	cbz	r3, 8000156 <frame_dummy+0xe>
 800014e:	4903      	ldr	r1, [pc, #12]	; (800015c <frame_dummy+0x14>)
 8000150:	4803      	ldr	r0, [pc, #12]	; (8000160 <frame_dummy+0x18>)
 8000152:	f3af 8000 	nop.w
 8000156:	bd08      	pop	{r3, pc}
 8000158:	00000000 	.word	0x00000000
 800015c:	20000020 	.word	0x20000020
 8000160:	08000740 	.word	0x08000740

08000164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800016e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000172:	2b00      	cmp	r3, #0
 8000174:	db0b      	blt.n	800018e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	f003 021f 	and.w	r2, r3, #31
 800017c:	4906      	ldr	r1, [pc, #24]	; (8000198 <__NVIC_EnableIRQ+0x34>)
 800017e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000182:	095b      	lsrs	r3, r3, #5
 8000184:	2001      	movs	r0, #1
 8000186:	fa00 f202 	lsl.w	r2, r0, r2
 800018a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800018e:	bf00      	nop
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	e000e100 	.word	0xe000e100

0800019c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	6039      	str	r1, [r7, #0]
 80001a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	db0a      	blt.n	80001c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	490c      	ldr	r1, [pc, #48]	; (80001e8 <__NVIC_SetPriority+0x4c>)
 80001b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ba:	0112      	lsls	r2, r2, #4
 80001bc:	b2d2      	uxtb	r2, r2
 80001be:	440b      	add	r3, r1
 80001c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c4:	e00a      	b.n	80001dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <__NVIC_SetPriority+0x50>)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f003 030f 	and.w	r3, r3, #15
 80001d2:	3b04      	subs	r3, #4
 80001d4:	0112      	lsls	r2, r2, #4
 80001d6:	b2d2      	uxtb	r2, r2
 80001d8:	440b      	add	r3, r1
 80001da:	761a      	strb	r2, [r3, #24]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	e000e100 	.word	0xe000e100
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <main>:
	{GPIOB, 0, 1, 'q', 'w', 0, 0}
	//{GPIOB, 2, 3, 'o', 'p', 0, 0}
};

int main(void)
{
 80001f0:	b590      	push	{r4, r7, lr}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
	Clock_Init();
 80001f6:	f000 f8ad 	bl	8000354 <Clock_Init>
	GPIO_Init();
 80001fa:	f000 f8c3 	bl	8000384 <GPIO_Init>
	Timer_Init();
 80001fe:	f000 f973 	bl	80004e8 <Timer_Init>

	volatile int enPos = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]

	while(1) {

		// Poll for Button state, set LED and key press if it's pressed
		for(int i=0; i<SWITCH_COUNT; i++) {
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	e05d      	b.n	80002c8 <main+0xd8>

			// Active low signal, check if the button was pressed
			if(!(switches[i].port->IDR & (0x1U << switches[i].switchPin))) {
 800020c:	494e      	ldr	r1, [pc, #312]	; (8000348 <main+0x158>)
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	4613      	mov	r3, r2
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	4413      	add	r3, r2
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	440b      	add	r3, r1
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6919      	ldr	r1, [r3, #16]
 800021e:	484a      	ldr	r0, [pc, #296]	; (8000348 <main+0x158>)
 8000220:	68fa      	ldr	r2, [r7, #12]
 8000222:	4613      	mov	r3, r2
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	4413      	add	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4403      	add	r3, r0
 800022c:	3304      	adds	r3, #4
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	2301      	movs	r3, #1
 8000234:	4093      	lsls	r3, r2
 8000236:	400b      	ands	r3, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d121      	bne.n	8000280 <main+0x90>
				switches[i].port->ODR |= (0x1U << switches[i].lightPin);
 800023c:	4942      	ldr	r1, [pc, #264]	; (8000348 <main+0x158>)
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	4613      	mov	r3, r2
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	4413      	add	r3, r2
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	440b      	add	r3, r1
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	6958      	ldr	r0, [r3, #20]
 800024e:	493e      	ldr	r1, [pc, #248]	; (8000348 <main+0x158>)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	440b      	add	r3, r1
 800025c:	3306      	adds	r3, #6
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	461a      	mov	r2, r3
 8000262:	2301      	movs	r3, #1
 8000264:	fa03 f102 	lsl.w	r1, r3, r2
 8000268:	4c37      	ldr	r4, [pc, #220]	; (8000348 <main+0x158>)
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	4613      	mov	r3, r2
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	4413      	add	r3, r2
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	4423      	add	r3, r4
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	ea40 0201 	orr.w	r2, r0, r1
 800027c:	615a      	str	r2, [r3, #20]
 800027e:	e020      	b.n	80002c2 <main+0xd2>
				// pressKey(switches[i].key)

			}

			else{
				switches[i].port->ODR &= ~(0x1U << switches[i].lightPin);
 8000280:	4931      	ldr	r1, [pc, #196]	; (8000348 <main+0x158>)
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	4613      	mov	r3, r2
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	4413      	add	r3, r2
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	440b      	add	r3, r1
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6958      	ldr	r0, [r3, #20]
 8000292:	492d      	ldr	r1, [pc, #180]	; (8000348 <main+0x158>)
 8000294:	68fa      	ldr	r2, [r7, #12]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	440b      	add	r3, r1
 80002a0:	3306      	adds	r3, #6
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2301      	movs	r3, #1
 80002a8:	4093      	lsls	r3, r2
 80002aa:	43d9      	mvns	r1, r3
 80002ac:	4c26      	ldr	r4, [pc, #152]	; (8000348 <main+0x158>)
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	4423      	add	r3, r4
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	ea00 0201 	and.w	r2, r0, r1
 80002c0:	615a      	str	r2, [r3, #20]
		for(int i=0; i<SWITCH_COUNT; i++) {
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3301      	adds	r3, #1
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	dd9e      	ble.n	800020c <main+0x1c>
				// releaseKey(switches[i].key)
			}
		}

		for(int i = 0; i < ENCODER_COUNT; i++) {
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	e032      	b.n	800033a <main+0x14a>

			// Clear position before reading, we only care about the direction
			// of movement not the overall position
			encoders[i].pos = 0;
 80002d4:	4a1d      	ldr	r2, [pc, #116]	; (800034c <main+0x15c>)
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	011b      	lsls	r3, r3, #4
 80002da:	4413      	add	r3, r2
 80002dc:	330c      	adds	r3, #12
 80002de:	2200      	movs	r2, #0
 80002e0:	801a      	strh	r2, [r3, #0]

			enPos = encoderRead(&encoders[i]);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	4a19      	ldr	r2, [pc, #100]	; (800034c <main+0x15c>)
 80002e8:	4413      	add	r3, r2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f936 	bl	800055c <encoderRead>
 80002f0:	4603      	mov	r3, r0
 80002f2:	607b      	str	r3, [r7, #4]

			// Clockwise motion
			if(enPos > 0) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	dd06      	ble.n	8000308 <main+0x118>
				//pressKey(encoder[i].posKey)
				// LED for testing, remove
				GPIOC->ODR |= GPIO_ODR_ODR_8;
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <main+0x160>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <main+0x160>)
 8000300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	e015      	b.n	8000334 <main+0x144>
			}

			// Counter-clockwise motion
			else if(enPos < 0) {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	da06      	bge.n	800031c <main+0x12c>
				//pressKey(encoder[i].negKey)
				// LED for testing, remove
				GPIOC->ODR |= GPIO_ODR_ODR_9;
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <main+0x160>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <main+0x160>)
 8000314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	e00b      	b.n	8000334 <main+0x144>
			// just release both keys so we don't have to keep track of
			// the direction of motion before this
			else {
				//releaseKey(encoder[i].posKey)
				//releaseKey(encoder[i].negKey)
				GPIOC->ODR &= ~GPIO_ODR_ODR_8;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <main+0x160>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <main+0x160>)
 8000322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000326:	6153      	str	r3, [r2, #20]
				GPIOC->ODR &= ~GPIO_ODR_ODR_9;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <main+0x160>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a08      	ldr	r2, [pc, #32]	; (8000350 <main+0x160>)
 800032e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000332:	6153      	str	r3, [r2, #20]
		for(int i = 0; i < ENCODER_COUNT; i++) {
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	3301      	adds	r3, #1
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	2b00      	cmp	r3, #0
 800033e:	ddc9      	ble.n	80002d4 <main+0xe4>
			}

		}

		delay(DELAY);		// delay for debouncing
 8000340:	200a      	movs	r0, #10
 8000342:	f000 f979 	bl	8000638 <delay>
		for(int i=0; i<SWITCH_COUNT; i++) {
 8000346:	e75e      	b.n	8000206 <main+0x16>
 8000348:	20000000 	.word	0x20000000
 800034c:	2000000c 	.word	0x2000000c
 8000350:	40020800 	.word	0x40020800

08000354 <Clock_Init>:
	}
}

void Clock_Init(void) {
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

	// Initialize system clocks
	// System uses 16 MHz HSI clock
	// USB uses 48 MHz clock generated by a scaled 8 MHz external crystal
	RCC->CR |= (RCC_CR_PLLON + RCC_CR_HSEON + RCC_CR_HSEBYP + RCC_CR_HSION);
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <Clock_Init+0x2c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <Clock_Init+0x2c>)
 800035e:	f043 7382 	orr.w	r3, r3, #17039360	; 0x1040000
 8000362:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000366:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= (RCC_CFGR_SW_HSI + RCC_CFGR_PLLSRC_HSE + RCC_CFGR_PLLMUL12 + RCC_CFGR_PLLDIV2);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <Clock_Init+0x2c>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <Clock_Init+0x2c>)
 800036e:	f443 03a2 	orr.w	r3, r3, #5308416	; 0x510000
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6093      	str	r3, [r2, #8]

	}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40023800 	.word	0x40023800

08000384 <GPIO_Init>:

// Exactly what it says
void GPIO_Init(void) {
 8000384:	b490      	push	{r4, r7}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0

	// Initialize GPIOA Clock for switches and LEDs
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800038a:	4b51      	ldr	r3, [pc, #324]	; (80004d0 <GPIO_Init+0x14c>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a50      	ldr	r2, [pc, #320]	; (80004d0 <GPIO_Init+0x14c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	61d3      	str	r3, [r2, #28]

	// Initialize GPIOB Clock for encoders
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000396:	4b4e      	ldr	r3, [pc, #312]	; (80004d0 <GPIO_Init+0x14c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a4d      	ldr	r2, [pc, #308]	; (80004d0 <GPIO_Init+0x14c>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	61d3      	str	r3, [r2, #28]

	// Port C used for test purposes, delete later
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80003a2:	4b4b      	ldr	r3, [pc, #300]	; (80004d0 <GPIO_Init+0x14c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a4a      	ldr	r2, [pc, #296]	; (80004d0 <GPIO_Init+0x14c>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	61d3      	str	r3, [r2, #28]

	// Reset GPIO level
	GPIOA->ODR = 0;
 80003ae:	4b49      	ldr	r3, [pc, #292]	; (80004d4 <GPIO_Init+0x150>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = 0;
 80003b4:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <GPIO_Init+0x154>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]

	// testing, delete later
	GPIOC->MODER |= GPIO_MODER_MODER8_0 + GPIO_MODER_MODER9_0;
 80003ba:	4b48      	ldr	r3, [pc, #288]	; (80004dc <GPIO_Init+0x158>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a47      	ldr	r2, [pc, #284]	; (80004dc <GPIO_Init+0x158>)
 80003c0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80003c4:	6013      	str	r3, [r2, #0]

	// Set LEDs as output, leave the rest as inputs
	// Also set switch pins as pull-ups
	// Because each pin has two config bits, we must shift accordingly
	for(int i=0; i<SWITCH_COUNT; i++) {
 80003c6:	2300      	movs	r3, #0
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	e044      	b.n	8000456 <GPIO_Init+0xd2>
		switches[i].port->MODER |= (0x1UL << (2 * switches[i].lightPin));
 80003cc:	4944      	ldr	r1, [pc, #272]	; (80004e0 <GPIO_Init+0x15c>)
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	440b      	add	r3, r1
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	4940      	ldr	r1, [pc, #256]	; (80004e0 <GPIO_Init+0x15c>)
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	4613      	mov	r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4413      	add	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	440b      	add	r3, r1
 80003ec:	3306      	adds	r3, #6
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	2201      	movs	r2, #1
 80003f4:	fa02 f103 	lsl.w	r1, r2, r3
 80003f8:	4c39      	ldr	r4, [pc, #228]	; (80004e0 <GPIO_Init+0x15c>)
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4423      	add	r3, r4
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	ea40 0201 	orr.w	r2, r0, r1
 800040c:	601a      	str	r2, [r3, #0]
		switches[i].port->PUPDR |= (0x1UL << (2 * switches[i].switchPin));
 800040e:	4934      	ldr	r1, [pc, #208]	; (80004e0 <GPIO_Init+0x15c>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4613      	mov	r3, r2
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	440b      	add	r3, r1
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	68d8      	ldr	r0, [r3, #12]
 8000420:	492f      	ldr	r1, [pc, #188]	; (80004e0 <GPIO_Init+0x15c>)
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4613      	mov	r3, r2
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	4413      	add	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	3304      	adds	r3, #4
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2201      	movs	r2, #1
 8000436:	fa02 f103 	lsl.w	r1, r2, r3
 800043a:	4c29      	ldr	r4, [pc, #164]	; (80004e0 <GPIO_Init+0x15c>)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4613      	mov	r3, r2
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	4413      	add	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4423      	add	r3, r4
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	ea40 0201 	orr.w	r2, r0, r1
 800044e:	60da      	str	r2, [r3, #12]
	for(int i=0; i<SWITCH_COUNT; i++) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	ddb7      	ble.n	80003cc <GPIO_Init+0x48>
	}

	// Set encoder pins as pull-up
	for(int i=0; i<ENCODER_COUNT; i++) {
 800045c:	2300      	movs	r3, #0
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	e02e      	b.n	80004c0 <GPIO_Init+0x13c>
		encoders[i].port->PUPDR |= (0x1UL << (2 * encoders[i].pin1));
 8000462:	4a20      	ldr	r2, [pc, #128]	; (80004e4 <GPIO_Init+0x160>)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	4413      	add	r3, r2
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	68d9      	ldr	r1, [r3, #12]
 800046e:	4a1d      	ldr	r2, [pc, #116]	; (80004e4 <GPIO_Init+0x160>)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	011b      	lsls	r3, r3, #4
 8000474:	4413      	add	r3, r2
 8000476:	3304      	adds	r3, #4
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2201      	movs	r2, #1
 800047e:	409a      	lsls	r2, r3
 8000480:	4818      	ldr	r0, [pc, #96]	; (80004e4 <GPIO_Init+0x160>)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	011b      	lsls	r3, r3, #4
 8000486:	4403      	add	r3, r0
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	430a      	orrs	r2, r1
 800048c:	60da      	str	r2, [r3, #12]
		encoders[i].port->PUPDR |= (0x1UL << (2 * encoders[i].pin2));
 800048e:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <GPIO_Init+0x160>)
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	4413      	add	r3, r2
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68d9      	ldr	r1, [r3, #12]
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <GPIO_Init+0x160>)
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	4413      	add	r3, r2
 80004a2:	3306      	adds	r3, #6
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	2201      	movs	r2, #1
 80004aa:	409a      	lsls	r2, r3
 80004ac:	480d      	ldr	r0, [pc, #52]	; (80004e4 <GPIO_Init+0x160>)
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	4403      	add	r3, r0
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
	for(int i=0; i<ENCODER_COUNT; i++) {
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	3301      	adds	r3, #1
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	ddcd      	ble.n	8000462 <GPIO_Init+0xde>
	}
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc90      	pop	{r4, r7}
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	20000000 	.word	0x20000000
 80004e4:	2000000c 	.word	0x2000000c

080004e8 <Timer_Init>:

void Timer_Init() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <Timer_Init+0x6c>)
 80004ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <Timer_Init+0x6c>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable interrupt
	NVIC_SetPriority(TIM6_IRQn, 0x01);
 80004f8:	2101      	movs	r1, #1
 80004fa:	202b      	movs	r0, #43	; 0x2b
 80004fc:	f7ff fe4e 	bl	800019c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_IRQn);
 8000500:	202b      	movs	r0, #43	; 0x2b
 8000502:	f7ff fe2f 	bl	8000164 <__NVIC_EnableIRQ>

	// Make sure counter is off
	TIM6->CR1 &= ~(TIM_CR1_CEN);
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <Timer_Init+0x70>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a13      	ldr	r2, [pc, #76]	; (8000558 <Timer_Init+0x70>)
 800050c:	f023 0301 	bic.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]

	// Reset timer
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM6RST;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <Timer_Init+0x6c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <Timer_Init+0x6c>)
 8000518:	f043 0310 	orr.w	r3, r3, #16
 800051c:	6193      	str	r3, [r2, #24]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST;
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <Timer_Init+0x6c>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <Timer_Init+0x6c>)
 8000524:	f023 0310 	bic.w	r3, r3, #16
 8000528:	6193      	str	r3, [r2, #24]

	// Prescalar set for timer to count up every millisecond
	TIM6->PSC = (uint16_t) (CLOCK_RATE / 1000);
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <Timer_Init+0x70>)
 800052c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = DELAY;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <Timer_Init+0x70>)
 8000534:	220a      	movs	r2, #10
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM6->EGR |= TIM_EGR_UG;
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <Timer_Init+0x70>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <Timer_Init+0x70>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6153      	str	r3, [r2, #20]
	TIM6->DIER |= TIM_DIER_UIE;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <Timer_Init+0x70>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a03      	ldr	r2, [pc, #12]	; (8000558 <Timer_Init+0x70>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	60d3      	str	r3, [r2, #12]



}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40023800 	.word	0x40023800
 8000558:	40001000 	.word	0x40001000

0800055c <encoderRead>:
		//	1		0		1		1		-1
		//	1		1		0		0		+2  (assume pin1 edges only)
		//	1		1		0		1		-1
		//	1		1		1		0		+1
		//	1		1		1		1		no movement
int16_t encoderRead(encoder_t *encoder) {
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint16_t state = encoder->state;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	895b      	ldrh	r3, [r3, #10]
 8000568:	81fb      	strh	r3, [r7, #14]

	state &= 3;		// Only want the first 2 bits
 800056a:	89fb      	ldrh	r3, [r7, #14]
 800056c:	f003 0303 	and.w	r3, r3, #3
 8000570:	81fb      	strh	r3, [r7, #14]
	if (encoder->port->IDR & (0x1U << encoder->pin1)) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	691a      	ldr	r2, [r3, #16]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	889b      	ldrh	r3, [r3, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	2301      	movs	r3, #1
 8000580:	408b      	lsls	r3, r1
 8000582:	4013      	ands	r3, r2
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <encoderRead+0x34>
		state |= 4;		// Store pin 1 value in bit 3
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	81fb      	strh	r3, [r7, #14]
	}
	if (encoder->port->IDR & (0x1U << encoder->pin2))	{
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	691a      	ldr	r2, [r3, #16]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	88db      	ldrh	r3, [r3, #6]
 800059a:	4619      	mov	r1, r3
 800059c:	2301      	movs	r3, #1
 800059e:	408b      	lsls	r3, r1
 80005a0:	4013      	ands	r3, r2
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <encoderRead+0x52>
		state |= 8;		// Store pin 2 value in bit 4
 80005a6:	89fb      	ldrh	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	81fb      	strh	r3, [r7, #14]
	}

	// These states are taken from the chart above
	switch (state) {
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0d      	cmp	r3, #13
 80005b4:	d832      	bhi.n	800061c <encoderRead+0xc0>
 80005b6:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <encoderRead+0x60>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f5 	.word	0x080005f5
 80005c0:	08000609 	.word	0x08000609
 80005c4:	0800061d 	.word	0x0800061d
 80005c8:	08000609 	.word	0x08000609
 80005cc:	0800061d 	.word	0x0800061d
 80005d0:	0800061d 	.word	0x0800061d
 80005d4:	080005f5 	.word	0x080005f5
 80005d8:	080005f5 	.word	0x080005f5
 80005dc:	0800061d 	.word	0x0800061d
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	08000609 	.word	0x08000609
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	08000609 	.word	0x08000609
 80005f0:	080005f5 	.word	0x080005f5
		case 1: case 7: case 8: case 14:
			encoder->pos++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	899b      	ldrh	r3, [r3, #12]
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	3301      	adds	r3, #1
 80005fe:	b29b      	uxth	r3, r3
 8000600:	b21a      	sxth	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	819a      	strh	r2, [r3, #12]
			break;
 8000606:	e009      	b.n	800061c <encoderRead+0xc0>
		case 2: case 4: case 11: case 13:
			encoder->pos--;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	899b      	ldrh	r3, [r3, #12]
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	b29b      	uxth	r3, r3
 8000614:	b21a      	sxth	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	819a      	strh	r2, [r3, #12]
			break;
 800061a:	bf00      	nop
			//encoder->pos -= 2;
			break;
	}

	// Set the new state as the old state for the next read
	encoder->state = (state >> 2);
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	b29a      	uxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	815a      	strh	r2, [r3, #10]

	return encoder->pos;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	899b      	ldrh	r3, [r3, #12]
 800062a:	b21b      	sxth	r3, r3

}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <delay>:


// Uses a timer to generate a fairly accurate delay in milliseconds
void delay(uint16_t ms) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	TIM6->ARR = ms;
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <delay+0x34>)
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CR1 |= TIM_CR1_CEN;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <delay+0x34>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <delay+0x34>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]
	while(TIM6->CR1 & TIM_CR1_CEN) {
 8000654:	bf00      	nop
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <delay+0x34>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f9      	bne.n	8000656 <delay+0x1e>
		// Check whether the timer is still enabled; if it isn't, that means
		// we've cleared it through the interrupt handler
	}

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40001000 	.word	0x40001000

08000670 <TIM6_IRQHandler>:

void TIM6_IRQHandler(void) {
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	// Clear the interrupt flag
	if(TIM6->SR & TIM_SR_UIF) {
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <TIM6_IRQHandler+0x30>)
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d005      	beq.n	800068c <TIM6_IRQHandler+0x1c>
		TIM6->SR &= ~TIM_SR_UIF;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <TIM6_IRQHandler+0x30>)
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <TIM6_IRQHandler+0x30>)
 8000686:	f023 0301 	bic.w	r3, r3, #1
 800068a:	6113      	str	r3, [r2, #16]
	}

	// disable the counter
	TIM6->CR1 &= ~TIM_CR1_CEN;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <TIM6_IRQHandler+0x30>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <TIM6_IRQHandler+0x30>)
 8000692:	f023 0301 	bic.w	r3, r3, #1
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40001000 	.word	0x40001000

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0b      	ldr	r4, [pc, #44]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 f811 	bl	80006f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fd8b 	bl	80001f0 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80006e8:	08000760 	.word	0x08000760
  ldr r2, =_sbss
 80006ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80006f0:	20000038 	.word	0x20000038

080006f4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_IRQHandler>
	...

080006f8 <__libc_init_array>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	2500      	movs	r5, #0
 80006fc:	4e0c      	ldr	r6, [pc, #48]	; (8000730 <__libc_init_array+0x38>)
 80006fe:	4c0d      	ldr	r4, [pc, #52]	; (8000734 <__libc_init_array+0x3c>)
 8000700:	1ba4      	subs	r4, r4, r6
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	42a5      	cmp	r5, r4
 8000706:	d109      	bne.n	800071c <__libc_init_array+0x24>
 8000708:	f000 f81a 	bl	8000740 <_init>
 800070c:	2500      	movs	r5, #0
 800070e:	4e0a      	ldr	r6, [pc, #40]	; (8000738 <__libc_init_array+0x40>)
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <__libc_init_array+0x44>)
 8000712:	1ba4      	subs	r4, r4, r6
 8000714:	10a4      	asrs	r4, r4, #2
 8000716:	42a5      	cmp	r5, r4
 8000718:	d105      	bne.n	8000726 <__libc_init_array+0x2e>
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000720:	4798      	blx	r3
 8000722:	3501      	adds	r5, #1
 8000724:	e7ee      	b.n	8000704 <__libc_init_array+0xc>
 8000726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800072a:	4798      	blx	r3
 800072c:	3501      	adds	r5, #1
 800072e:	e7f2      	b.n	8000716 <__libc_init_array+0x1e>
 8000730:	08000758 	.word	0x08000758
 8000734:	08000758 	.word	0x08000758
 8000738:	08000758 	.word	0x08000758
 800073c:	0800075c 	.word	0x0800075c

08000740 <_init>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	bf00      	nop
 8000744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000746:	bc08      	pop	{r3}
 8000748:	469e      	mov	lr, r3
 800074a:	4770      	bx	lr

0800074c <_fini>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	bf00      	nop
 8000750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000752:	bc08      	pop	{r3}
 8000754:	469e      	mov	lr, r3
 8000756:	4770      	bx	lr
